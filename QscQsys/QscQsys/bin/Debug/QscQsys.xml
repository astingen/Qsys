<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QscQsys</name>
    </assembly>
    <members>
        <member name="M:QscQsys.NamedComponents.AbstractQsysComponent.InternalInitialize(System.String,System.String)">
            <summary>
            Initialize to be called from concrete's initialize method
            </summary>
            <param name="coreId"></param>
            <param name="componentName"></param>
        </member>
        <member name="M:QscQsys.NamedComponents.AbstractQsysComponent.Dispose">
            <summary>
            Clean up of unmanaged resources
            </summary>
        </member>
        <member name="T:QscQsys.QsysInternalEventsArgs">
            <summary>
            Used only for internal methods.
            </summary>
        </member>
        <member name="M:QscQsys.Utils.SimplUtils.ScaleToUshort(System.Double)">
            <summary>
            Scales the given level from input of 0 - 1
            to ouptput of  0 - 65535
            for use going to SimplWindows.
            </summary>
            <param name="level"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">If level is below 0 or above 1</exception>
            <returns></returns>
        </member>
        <member name="M:QscQsys.Utils.SimplUtils.ScaleToDouble(System.UInt16)">
            <summary>
            Scales the given level from input of 0 - 65535
            to ouptput of  0 - 1
            for use coming from SimplWindows.
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:QscQsys.Utils.SimplUtils.ScaleToDouble(System.Int32)">
            <summary>
            Scales the given level from input of 0 - 65535
            to ouptput of  0 - 1
            for use coming from SimplWindows.
            </summary>
            <param name="level"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">If level is below 0 or above 65535</exception>
            <returns></returns>
        </member>
        <member name="T:QscQsys.Intermediaries.NamedControl">
            <summary>
            Acts as an intermediary between the QSys Core and the QsysNamedControls
            </summary>
        </member>
        <member name="M:QscQsys.NamedComponents.QsysRouter.OutputMute(System.UInt16)">
            <summary>
            Sets the current mute state.
            </summary>
            <param name="value">The state to set the mute.</param>
        </member>
        <member name="M:QscQsys.QsysMatrixMixerApi.SetCrossPointMute(System.String,System.String,System.Boolean)">
            <summary>
            Sets a crosspoint mute ex. *=everything, 1 2 3=channels 1, 2, 3,  1-6=channels 1 through 6, 1-8 !3=channels 1 through 8 except 3, * !3-5=everything but 3 through 5
            </summary>
            <param name="inputs">The input channels.</param>
            <param name="outputs">The output channels.</param>
            <param name="value">The value of the crosspoint mute.</param>
        </member>
        <member name="T:QscQsys.QsysCore">
            <summary>
            Q-SYS Core class that manages connection and parses responses to be distributed to components and named control classes.
            </summary>
        </member>
        <member name="M:QscQsys.QsysCore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QscQsys.QsysCore"/> class.
            </summary>
        </member>
        <member name="M:QscQsys.QsysCore.Debug(System.UInt16)">
            <summary>
            Set debug mode.
            </summary>
            <param name="value">Debug level to set.</param>
            <remarks>
            Debug level 0 = off
            Debug level 1 = Main communications
            Debug level 2 = Main communications and verbose console
            </remarks>
        </member>
        <member name="M:QscQsys.QsysCore.Initialize(System.String,System.String,System.String,System.UInt16,System.String,System.String,System.UInt16)">
            <summary>
            Initialzes all methods that are required to setup the class. Connection is established on port 1702.
            </summary>
        </member>
        <member name="M:QscQsys.QsysCore.NewExternalResponse(System.String)">
            <summary>
            Enqueue response from SIMPL to be parsed
            </summary>
            <param name="response">Response from SIMPL to be parsed</param>
        </member>
        <member name="M:QscQsys.QsysCore.Dispose">
            <summary>
            Clean up of unmanaged resources
            </summary>
        </member>
        <member name="P:QscQsys.QsysCore.IsInitialized">
            <summary>
            Gets initialzation status.
            </summary>
        </member>
        <member name="P:QscQsys.QsysCore.IsDisposed">
            <summary>
            Gets disposed status.
            </summary>
        </member>
        <member name="P:QscQsys.QsysCore.PrimaryIsConnected">
            <summary>
            Gets primary core connection status.
            </summary>
        </member>
        <member name="P:QscQsys.QsysCore.SecondaryIsConnected">
            <summary>
            Gets backup core connection status.
            </summary>
        </member>
        <member name="P:QscQsys.QsysCore.IsAuthenticated">
            <summary>
            Gets authentication status.
            </summary>
        </member>
        <member name="P:QscQsys.QsysCore.IsDebugMode">
            <summary>
            Gets debug mode.
            </summary>
        </member>
        <member name="P:QscQsys.QsysCore.MaxLogonAttemps">
            <summary>
            Gets or sets the max logon attempts made when trying to authorize with the core.
            </summary>
        </member>
        <member name="P:QscQsys.QsysCore.IsRedundant">
            <summary>
            Gets redundant status.
            </summary>
        </member>
        <member name="P:QscQsys.QsysCore.IsEmulator">
            <summary>
            Gets emulator status.
            </summary>
        </member>
        <member name="P:QscQsys.QsysCore.DesignName">
            <summary>
            Gets running design name.
            </summary>
        </member>
        <member name="P:QscQsys.QsysCore.PrimaryCoreActive">
            <summary>
            Gets a bool representing the primary core active status.
            </summary>
        </member>
        <member name="P:QscQsys.QsysCore.BackupCoreActive">
            <summary>
            Gets a bool representing the backup core active status.
            </summary>
        </member>
        <member name="P:QscQsys.QsysCore.CoreId">
            <summary>
            Get the core ID.
            </summary>
        </member>
        <member name="P:QscQsys.QsysCore.Port">
            <summary>
            Get or set the network port. If currently connected, changing the port will reconnect with the new port number.
            </summary>
        </member>
        <member name="P:QscQsys.QsysCore.PrimaryHost">
            <summary>
            Gets or sets the primary core network host address. If currently connected, changing the host will reconnect with the new host address.
            </summary>
        </member>
        <member name="P:QscQsys.QsysCore.BackupHost">
            <summary>
            Gets or sets the backup core network host address. If currently connected, changing the host will reconnect with the new host address.
            </summary>
        </member>
        <member name="P:QscQsys.QsysCore.Username">
            <summary>
            Gets or sets the username used to authenticate with the core.
            </summary>
        </member>
        <member name="P:QscQsys.QsysCore.Password">
            <summary>
            Sets the password used to authenticate with the core.
            </summary>
        </member>
        <member name="M:QscQsys.NamedComponents.QsysFader.Volume(System.UInt16)">
            <summary>
            Sets the current volume value.
            </summary>
            <param name="value">Volume value to set the fader to.</param>
        </member>
        <member name="M:QscQsys.NamedComponents.QsysFader.Mute(System.Boolean)">
            <summary>
            Sets the current mute state.
            </summary>
            <param name="value">The state to set the mute.</param>
        </member>
        <member name="M:QscQsys.NamedComponents.QsysFader.Mute(System.UInt16)">
            <summary>
            Sets the current mute state.
            </summary>
            <param name="value">The state to set the mute.</param>
        </member>
        <member name="T:QscQsys.Intermediaries.NamedComponent">
            <summary>
            Acts as an intermediary between the QSys Core and the QsysNamedControls
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/>
            or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:QscQsys.NamedComponents.QsysAvStreamRouter">
            <summary>
            Router for Q-Sys cameras
            </summary>
        </member>
        <member name="T:QscQsys.NamedComponents.QsysMediacastRouter">
            <summary>
            Router for Q-Sys cameras
            </summary>
        </member>
    </members>
</doc>
